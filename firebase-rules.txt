rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasValidFields(requiredFields) {
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidAmount() {
      return request.resource.data.amount is number && request.resource.data.amount > 0;
    }

    // User profiles: Only the authenticated user can read/write their own profile
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && hasValidFields(['firstName', 'email']);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Expenses: Only the owner can create, update, read, or delete their expenses
    match /expenses/{expenseId} {
      allow read, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId) && 
                     hasValidFields(['amount', 'category', 'date', 'userId']) &&
                     isValidAmount();
      allow update: if isOwner(resource.data.userId) &&
                     request.resource.data.userId == resource.data.userId &&
                     isValidAmount();
    }

    // Loans: Only the owner can create, update, read, or delete their loans
    match /loans/{loanId} {
      allow read, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId) && 
                     hasValidFields(['amount', 'contact', 'date', 'userId', 'pendingAmount']) &&
                     isValidAmount();
      allow update: if isOwner(resource.data.userId) &&
                     request.resource.data.userId == resource.data.userId;
    }

    // Investments: Only the owner can create, update, read, or delete their investments
    match /investments/{investmentId} {
      allow read, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId) && 
                     hasValidFields(['amount', 'type', 'userId']) &&
                     isValidAmount();
      allow update: if isOwner(resource.data.userId) &&
                     request.resource.data.userId == resource.data.userId &&
                     isValidAmount();
    }
    
    // Budgets: Only the owner can create, update, read, or delete their budgets
    match /budgets/{budgetId} {
      allow read, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId) && 
                     hasValidFields(['amount', 'category', 'period', 'userId']) &&
                     isValidAmount();
      allow update: if isOwner(resource.data.userId) &&
                     request.resource.data.userId == resource.data.userId &&
                     isValidAmount();
    }
    
    // Borrowings: Only the owner can create, update, read, or delete their borrowings
    match /borrowings/{borrowingId} {
      allow read, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isOwner(request.resource.data.userId) && 
                     hasValidFields(['amount', 'lenderName', 'dateBorrowed', 'userId']) &&
                     isValidAmount();
      allow update: if isOwner(resource.data.userId) &&
                     request.resource.data.userId == resource.data.userId && // Ensure userId is not changed
                     isValidAmount(); // Add amount validation on update
    }
  }
}